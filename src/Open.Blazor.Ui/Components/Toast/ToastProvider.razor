@implements IDisposable
@inject ToastService ToastService

<div class="fixed top-4 right-4 z-50 flex flex-col items-end pointer-events-none">
    @foreach (var toast in ToastService.GetToasts())
    {
        <div id="toast" class="@GetToastClasses(toast) transform transition-all duration-500 ease-in-out shadow-lg rounded-lg p-4 mb-4 max-w-md pointer-events-auto w-full"
            style="@GetTransformStyle(toast)">
            <div class="flex items-center">
                @switch (toast.Type)
                {
                    case ToastType.Success:
                        <svg class="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                        </svg>
                        break;
                    case ToastType.Error:
                        <svg class="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                        break;
                    case ToastType.Info:
                        <svg class="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        break;
                    case ToastType.Warning:
                        <svg class="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z">
                            </path>
                        </svg>
                        break;
                }
                <div class="ml-2 mr-6">
                    @if (!string.IsNullOrEmpty(toast.Title))
                    {
                        <div class="font-semibold">@toast.Title</div>
                    }
                    <div class="text-sm">@toast.Message</div>
                </div>
                <button @onclick="() => ToastService.RemoveToast(toast)" class="ml-auto focus:outline-none">
                    <svg class="w-4 h-4 opacity-50 hover:opacity-75 transition-opacity" fill="currentColor"
                        viewBox="0 0 20 20">
                        <path fill-rule="evenodd"
                            d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                            clip-rule="evenodd"></path>
                    </svg>
                </button>
            </div>
        </div>
    }
</div>

@code {
    protected override void OnInitialized() => ToastService.OnToastsChanged += StateHasChanged;
    private string GetToastClasses(ToastMessage toast) => toast.Type switch
    {
        ToastType.Success => "bg-green-500 text-white",
        ToastType.Error => "bg-red-500 text-white",
        ToastType.Info => "bg-blue-500 text-white",
        ToastType.Warning => "bg-yellow-500 text-white",
        _ => "bg-gray-500 text-white"
    };

    private string GetTransformStyle(ToastMessage toast)
    {
        return toast.IsVisible
        ? "opacity: 1; transform: translateX(0); transition: all 500ms cubic-bezier(0.4, 0, 0.2, 1);"
        : "opacity: 0; transform: translateX(100%); transition: all 500ms cubic-bezier(0.4, 0, 0.2, 1);";
    }

    public void Dispose() => ToastService.OnToastsChanged -= StateHasChanged;

}