@using Markdig

@if (Message is not null)
{
    <div class="max-w-3xl mx-auto p-5 box-border flex flex-col @MessageRoleClass">
        @if (Message.Role == MessageRole.User)
        {
            <div class="flex justify-end">
                <div class="bg-gray-800 text-white p-4 rounded-lg max-w-md shadow-lg break-words">
                    @(Message.Content ?? string.Empty)
                </div>
            </div>
        }
        else
        {
            <div class="flex items-center space-x-4 mb-2">
                <div class="flex items-center justify-center w-10 h-10 @HostBackgroundClass rounded-full text-white font-bold">
                    @Message.Model.Substring(0, 1)
                </div>
                <div class="text-gray-400 text-sm">
                    @($"{Message.Model} - {Message.Date}")
                </div>
            </div>

            @if (string.IsNullOrEmpty(Message.Content))
            {
                <div class="flex items-center justify-center">
                    <div class="flex gap-1">
                        <span class="w-2.5 h-2.5 @HostBackgroundClass rounded-full animate-bounce animation-delay-0"></span>
                        <span class="w-2.5 h-2.5 @HostBackgroundClass rounded-full animate-bounce animation-delay-200"></span>
                        <span class="w-2.5 h-2.5 @HostBackgroundClass rounded-full animate-bounce animation-delay-400"></span>
                    </div>
                </div>
            }
            else
            {
                <div class="prose prose-sm text-gray-300 max-w-3xl w-full mx-auto">
                    <div class="p-4 border @HostBorderClass rounded-lg bg-[#0d1117] relative" style="padding-bottom: 3rem;">
                        <div class="overflow-x-auto w-full">
                            <div class="[&>*]:break-words [&>*]:overflow-x-auto
                                        [&>pre]:bg-neutral-900 [&>pre]:p-4 [&>pre]:rounded-lg [&>pre]:text-neutral-100 [&>pre]:whitespace-pre-wrap
                                        [&>code]:bg-neutral-900 [&>code]:px-2 [&>code]:py-1 [&>code]:rounded [&>code]:text-neutral-100 [&>code]:whitespace-pre-wrap
                                        [&>strong]:text-white
                                        [&>a]:text-cyan-400 [&>a]:no-underline hover:[&>a]:underline
                                        [&>blockquote]:text-neutral-400 [&>blockquote]:border-l-4 [&>blockquote]:border-neutral-600 [&>blockquote]:pl-4 [&>blockquote]:my-2
                                        [&>ul]:pl-5 [&>ol]:pl-5 [&>li]:mb-1">
                                @((MarkupString)Markdown.ToHtml(Message.Content ?? string.Empty))
                            </div>
                        </div>
                        @if (Message.IsDoneStreaming)
                        {
                            <div class="absolute bottom-2 right-2 group">
                                <button @onclick="CopyToClipboard"
                                    class="p-2 bg-gray-700 hover:bg-gray-600 rounded-md transition-colors duration-200">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-300" fill="currentColor"
                                        viewBox="0 0 24 24">
                                        <path
                                            d="M16 1H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2zm0 14H4V3h12v12zM20 5h-2v2h2v12H8v-2H6v2a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2zm-6 4H6v2h8V9z" />
                                    </svg>
                                </button>
                                <div class="absolute bottom-full right-1/2 transform translate-x-1/2 mb-1 hidden group-hover:block">
                                    <div class="bg-gray-800 text-white px-3 py-1 rounded-md shadow-lg text-sm whitespace-nowrap">
                                        Copy contents
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        }
    </div>
}

@code {
    [Parameter] public MessageContent? Message { get; set; }
    [Parameter] public IJSRuntime? JsRuntime { get; set; }
    [Parameter] public ToastComponent? Toast { get; set; }
    [Parameter] public HostMode? Host { get; set; }

    private string MessageRoleClass => Message?.Role == MessageRole.Assistant ? "items-start" : "items-end";
    private string HostBackgroundClass => Host == HostMode.Local ? "bg-gray-700" : "bg-[#6E50D5]";
    private string HostBorderClass => Host == HostMode.Local ? "border-neutral-600" : "border-violet-600";

    private async Task CopyToClipboard()
    {
        if (!string.IsNullOrEmpty(Message?.Content))
        {
            await JsRuntime!.InvokeVoidAsync("navigator.clipboard.writeText", Message.Content);
            await Toast!.ShowToastAsync(
            message: "Copied to clipboard.",
            type: ToastType.Success,
            title: "",
            durationMs: 3000
            );
        }
        else
        {
            await Toast!.ShowToastAsync(
            message: "Clipboard's empty",
            type: ToastType.Error,
            title: "",
            durationMs: 3000
            );
        }
    }
}
